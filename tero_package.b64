Y2xhc3MgdGVyb19wYWNrYWdlIHsKCiAgICBwcml2YXRlIGZ1bmN0aW9uIF9vc19wYXRoKCRmb2xkZXIpCiAgICB7IAogICAgICAgIGlmKFBIUF9PUz09IldJTk5UIikgCiAgICAgICAgewogICAgICAgICAgICBpZiggc3RycG9zKCRmb2xkZXIsICIvIikgPiAwICkKICAgICAgICAgICAgICAgICRmb2xkZXIgPSBzdHJfcmVwbGFjZSgiLyIsIlxcIiwgJGZvbGRlcik7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiAkZm9sZGVyOwogICAgfQogICAgCiAgICAKICAgIHByaXZhdGUgZnVuY3Rpb24gX2V4ZWMoJGNvbW1hbmQpIAogICAgewogICAgICAgICRyZXN1bHQgPSBhcnJheSgpOwogICAgICAgIAogICAgICAgIGV4ZWMoJGNvbW1hbmQsICRyZXN1bHQpOwogICAgICAgIAogICAgICAgIGZvcmVhY2ggKCRyZXN1bHQgYXMgJGxpbmUpIAogICAgICAgIHsKICAgICAgICAgICAgZWNobyAieyRsaW5lfVxuIjsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIGltcGxvZGUoIlxuIiwgJHJlc3VsdCk7CiAgICB9CiAgICAKICAgIHByaXZhdGUgZnVuY3Rpb24gX3JlYWQoJG1lc3NhZ2UpCiAgICB7IAogICAgICAgIGVjaG8gInskbWVzc2FnZX1cbiI7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRyaW0oZmdldHMoU1RESU4pKTsKICAgIH0KICAgIAogICAgcHJpdmF0ZSBmdW5jdGlvbiBfbWtkaXIoJGZvbGRlcikKICAgIHsKICAgICAgICAkZm9sZGVyID0gJHRoaXMtPl9vc19wYXRoKCRmb2xkZXIpOwogICAgICAgIAogICAgICAgIGVjaG8gIm1rZGlyIHskZm9sZGVyfVxuIjsKICAgICAgICAKICAgICAgICBta2RpcigkZm9sZGVyKTsKICAgIH0KICAgIAogICAgcHJpdmF0ZSBmdW5jdGlvbiBfY2hkaXIoJGZvbGRlcikKICAgIHsKICAgICAgICAkZm9sZGVyID0gJHRoaXMtPl9vc19wYXRoKCRmb2xkZXIpOwogICAgICAgIAogICAgICAgIGVjaG8gImNoZGlyIHskZm9sZGVyfVxuIjsKICAgICAgICAKICAgICAgICBjaGRpcigieyRmb2xkZXJ9Iik7IAogICAgfQogICAgCiAgICBwcml2YXRlIGZ1bmN0aW9uIF9jb3B5KCRmcm9tLCAkdG89Ii4vIikKICAgIHsgCiAgICAgICAgZWNobyAiY29weSBmcm9tOiB7JGZyb219IHRvOiB7JHRvfVxuIjsKICAgIAogICAgICAgICRmcm9tID0gJHRoaXMtPl9vc19wYXRoKCRmcm9tKTsKICAgIAogICAgICAgIGlmKFBIUF9PUz09IldJTk5UIikgCiAgICAgICAgewogICAgICAgICAgICBpZigkdG8pCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICR0aGlzLT5fZXhlYygiWGNvcHkgeyRmcm9tfSB7JHRvfSAvRSAvSCAvQyAvSSIpOyAKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICR0aGlzLT5fZXhlYygiWGNvcHkgeyRmcm9tfSIpOyAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICAkdGhpcy0
